{{/* This whole template is only necessary if we're using rainloop */}}
{{ if .Values.rainloop.enabled -}}  
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  labels:
    app.kubernetes.io/name: {{ template "dockermailserver.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "dockermailserver.fullname" . }}-rainloop
spec:
  replicas: {{ default 2 .Values.deployment.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "dockermailserver.fullname" . }}-rainloop
      release: "{{ .Release.Name }}"
  strategy: {{- toYaml .Values.rainloop.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "dockermailserver.fullname" . }}-rainloop
        release: "{{ .Release.Name }}"
        {{- if .Values.rainloop.annotations }}
      annotations:
{{ toYaml .Values.rainloop.annotations | indent 8 }}  
        {{ end }}          
    spec:
      serviceAccountName: {{ template "dockermailserver.rainloop.serviceAccountName" . }}
      containers:
        - name: rainloop
          image: "{{ .Values.rainloop.image.name }}:{{ .Values.rainloop.image.tag }}"
          imagePullPolicy: {{ .Values.rainloop.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: data
              mountPath: "/rainloop/data"
              subPath: "rainloop"
          env:
          - name: LOG_TO_STDOUT
            value: "true"

      volumes:
      - name: "data"
        persistentVolumeClaim:
          claimName: {{ template "dockermailserver.pvcName" . }}-rainloop

{{ end }}